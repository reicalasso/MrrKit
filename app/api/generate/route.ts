import { NextRequest, NextResponse } from 'next/server'

const SYSTEM_PROMPT = `Sen MrrKit i√ßin kod √ºreten bir AI asistanƒ±sƒ±n. Kullanƒ±cƒ±nƒ±n prompt'una g√∂re React bile≈üenleri olu≈üturuyorsun.

Kurallar:
1. Sadece React fonksiyonel bile≈üen kodu √ºret
2. Modern React hooks kullan (useState, useEffect, useCallback, useMemo)
3. Tailwind CSS sƒ±nƒ±flarƒ± kullan - utility-first yakla≈üƒ±m
4. Export default component olmalƒ±
5. Import statement'larƒ± ekleme, sadece bile≈üen kodunu ver
6. UI bile≈üenleri i√ßin ≈üunlarƒ± kullan: Button, Input, Card, CardHeader, CardTitle, CardContent
7. Responsive tasarƒ±m yap (sm:, md:, lg: breakpoints)
8. Accessible kod yaz (aria-label, alt text, semantic HTML)
9. TypeScript tiplemeleri kullan
10. Modern JavaScript syntax (arrow functions, destructuring, template literals)
11. Performance optimizasyon d√º≈ü√ºn (memo, callback dependencies)
12. Error handling ekle
13. Loading states ekle
14. Modern CSS Grid ve Flexbox kullan

√ñrnek format:
\`\`\`jsx
export default function GeneratedComponent() {
  const [state, setState] = useState(initialValue)
  
  const handleAction = useCallback(() => {
    // action logic
  }, [dependencies])

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Component Title</CardTitle>
      </CardHeader>
      <CardContent>
        {/* component content */}
      </CardContent>
    </Card>
  )
}
\`\`\`

√ñnemli: Sadece component kodunu ver, import/export dƒ±≈üƒ±nda hi√ß bir ≈üey ekleme.`

// Mevcut modeller listesi (GPT-4 eri≈üimi yoksa alternatifler)
const AVAILABLE_MODELS = [
  'gpt-3.5-turbo',
  'gpt-3.5-turbo-16k',
  'gpt-4o-mini',
  'gpt-4-turbo-preview',
  'gpt-4'
]

async function tryOpenAIGenerationWithKey(prompt: string, apiKey: string) {
  if (!apiKey) {
    throw new Error('OpenAI API key not found')
  }

  // √ñnce en ekonomik ve g√ºvenilir modelleri dene
  const prioritizedModels = [
    'gpt-4o-mini',        // En ekonomik ve hƒ±zlƒ±
    'gpt-3.5-turbo',      // Genel ama√ßlƒ±
    'gpt-3.5-turbo-16k',  // Daha uzun context
    'gpt-4-turbo-preview', // Daha geli≈ümi≈ü
    'gpt-4'               // En g√º√ßl√º ama pahalƒ±
  ]

  let lastError = null

  for (const model of prioritizedModels) {
    try {
      console.log(`Trying model: ${model}`)
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: model,
          messages: [
            { role: 'system', content: SYSTEM_PROMPT },
            { 
              role: 'user', 
              content: `L√ºtfen ≈üu prompt'a g√∂re bir React bile≈üeni olu≈ütur: ${prompt}
              
              Bile≈üen modern, responsive ve kullanƒ±cƒ± dostu olmalƒ±. Tailwind CSS ile stillendir ve gerekli state management'ƒ± ekle.` 
            }
          ],
          temperature: 0.7,
          max_tokens: 2500, // Biraz azalttƒ±k quota i√ßin
          top_p: 1,
          frequency_penalty: 0,
          presence_penalty: 0,
        }),
      })

      if (response.ok) {
        const data = await response.json()
        const generatedCode = data.choices[0]?.message?.content
        
        if (generatedCode) {
          console.log(`‚úÖ Successfully used model: ${model}`)
          return generatedCode
        }
      } else {
        const errorData = await response.json().catch(() => ({}))
        const errorMessage = errorData.error?.message || 'Unknown error'
        
        console.warn(`‚ùå Model ${model} failed:`, response.status, errorMessage)
        lastError = new Error(`${response.status} - ${errorMessage}`)
        
        // Hƒ±zlƒ± fallback kararlarƒ±
        if (response.status === 429) {
          console.log('‚ö° Rate limit/quota exceeded, skipping to mock response')
          break // Quota hatasƒ± varsa diƒüer modelleri deneme, direkt mock'a ge√ß
        }
        
        if (response.status === 404) {
          continue // Model mevcut deƒüil, diƒüerini dene
        }
        
        if (response.status >= 500) {
          continue // Server hatasƒ±, diƒüerini dene
        }
        
        // Diƒüer hatalar i√ßin de devam et
        continue
      }
    } catch (error) {
      console.warn(`‚ùå Error with model ${model}:`, error)
      lastError = error instanceof Error ? error : new Error('Unknown error')
      
      // Network hatasƒ± gibi durumlarda da devam et
      continue
    }
  }
  
  // Eƒüer t√ºm modeller ba≈üarƒ±sƒ±zsa, son hatayƒ± fƒ±rlat
  throw lastError || new Error('All models failed')
}

const ADVANCED_SYSTEM_PROMPT = `Sen MrrKit i√ßin geli≈ümi≈ü uygulama √ºreten bir AI asistanƒ±sƒ±n. Kullanƒ±cƒ±nƒ±n prompt'una g√∂re tam uygulamalar, sayfa layoutlarƒ± ve karma≈üƒ±k bile≈üen sistemleri olu≈üturuyorsun.

YETENEKLERIN:
1. Tek bile≈üenden tam uygulama yapƒ±sƒ±na kadar her ≈üeyi √ºretebilirsin
2. Multi-component sistemler (navbar, sidebar, content, footer)
3. Routing ve navigation yapƒ±larƒ±
4. State management sistemleri (context, zustand patterns)
5. Form validation ve data handling
6. Authentication layouts
7. Dashboard ve admin panelleri
8. E-commerce uygulamalarƒ±
9. Social media uygulamalarƒ±
10. Complex data visualization

√áIKTI FORMATLARI:
- SINGLE_COMPONENT: Tek bile≈üen
- MULTI_COMPONENT: Birden fazla bile≈üen
- FULL_APP: Tam uygulama yapƒ±sƒ±
- LAYOUT_SYSTEM: Layout sistemi

KURALLAR:
1. Modern React patterns (hooks, context, custom hooks)
2. TypeScript interfaces where appropriate
3. Tailwind CSS utility-first approach
4. Responsive design (mobile-first)
5. Accessibility (ARIA labels, semantic HTML)
6. Performance optimizations
7. Error boundaries ve loading states
8. Clean code practices

OUTPUT FORMAT:
\`\`\`json
{
  "type": "SINGLE_COMPONENT" | "MULTI_COMPONENT" | "FULL_APP" | "LAYOUT_SYSTEM",
  "components": [
    {
      "name": "ComponentName",
      "code": "React component code",
      "description": "What this component does",
      "dependencies": ["useState", "useEffect"]
    }
  ],
  "instructions": "How to use these components together",
  "features": ["Feature 1", "Feature 2"]
}
\`\`\`

Prompt'a g√∂re en uygun formatƒ± se√ß ve kapsamlƒ± √ß√∂z√ºm √ºret.`

// Mock response generator (geli≈ümi≈ü)
function generateAdvancedMockCode(prompt: string): any {
  const lowerPrompt = prompt.toLowerCase()
  
  // E-commerce full app
  if (lowerPrompt.includes('e-ticaret') || lowerPrompt.includes('ecommerce') || lowerPrompt.includes('online maƒüaza')) {
    return {
      type: "FULL_APP",
      components: [
        {
          name: "ECommerceApp",
          code: `export default function ECommerceApp() {
  const [currentPage, setCurrentPage] = useState('products')
  const [cart, setCart] = useState([])
  const [products] = useState([
    { id: 1, name: 'Laptop Gaming', price: 25000, image: 'https://images.unsplash.com/photo-1603302576837-37561b2e2302?w=300', category: 'electronics' },
    { id: 2, name: 'Akƒ±llƒ± Telefon', price: 15000, image: 'https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?w=300', category: 'electronics' },
    { id: 3, name: 'Kablosuz Kulaklƒ±k', price: 800, image: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=300', category: 'accessories' }
  ])

  const addToCart = (product) => {
    setCart(prev => {
      const existing = prev.find(item => item.id === product.id)
      if (existing) {
        return prev.map(item => 
          item.id === product.id 
            ? { ...item, quantity: item.quantity + 1 }
            : item
        )
      }
      return [...prev, { ...product, quantity: 1 }]
    })
  }

  const removeFromCart = (productId) => {
    setCart(prev => prev.filter(item => item.id !== productId))
  }

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0)
  }

  const Navigation = () => (
    <nav className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center gap-8">
            <h1 className="text-2xl font-bold text-purple-600">TechStore</h1>
            <div className="hidden md:flex gap-6">
              <button 
                onClick={() => setCurrentPage('products')}
                className={\`px-3 py-2 rounded-md \${currentPage === 'products' ? 'bg-purple-100 text-purple-700' : 'text-gray-600 hover:text-gray-900'}\`}
              >
                √úr√ºnler
              </button>
              <button 
                onClick={() => setCurrentPage('categories')}
                className={\`px-3 py-2 rounded-md \${currentPage === 'categories' ? 'bg-purple-100 text-purple-700' : 'text-gray-600 hover:text-gray-900'}\`}
              >
                Kategoriler
              </button>
            </div>
          </div>
          <button 
            onClick={() => setCurrentPage('cart')}
            className="relative bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors"
          >
            üõí Sepet ({cart.length})
            {cart.length > 0 && (
              <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center">
                {cart.reduce((sum, item) => sum + item.quantity, 0)}
              </span>
            )}
          </button>
        </div>
      </div>
    </nav>
  )

  const ProductCard = ({ product }) => (
    <div className="bg-white rounded-xl shadow-sm border hover:shadow-md transition-shadow duration-300">
      <img 
        src={product.image} 
        alt={product.name}
        className="w-full h-48 object-cover rounded-t-xl"
      />
      <div className="p-6">
        <h3 className="font-semibold text-lg mb-2">{product.name}</h3>
        <p className="text-gray-600 text-sm mb-4 capitalize">{product.category}</p>
        <div className="flex justify-between items-center">
          <span className="text-2xl font-bold text-purple-600">‚Ç∫{product.price.toLocaleString()}</span>
          <Button 
            onClick={() => addToCart(product)}
            className="bg-purple-600 hover:bg-purple-700"
          >
            Sepete Ekle
          </Button>
        </div>
      </div>
    </div>
  )

  const ProductsPage = () => (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h2 className="text-3xl font-bold mb-8">T√ºm √úr√ºnler</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  )

  const CartPage = () => (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <h2 className="text-3xl font-bold mb-8">Alƒ±≈üveri≈ü Sepeti</h2>
      {cart.length === 0 ? (
        <div className="text-center py-16">
          <div className="text-6xl mb-4">üõí</div>
          <h3 className="text-xl font-medium mb-2">Sepetiniz bo≈ü</h3>
          <p className="text-gray-600 mb-6">√úr√ºn eklemek i√ßin alƒ±≈üveri≈üe ba≈ülayƒ±n</p>
          <Button onClick={() => setCurrentPage('products')}>
            Alƒ±≈üveri≈üe Ba≈üla
          </Button>
        </div>
      ) : (
        <div className="space-y-6">
          {cart.map(item => (
            <div key={item.id} className="bg-white rounded-xl p-6 shadow-sm border">
              <div className="flex items-center gap-6">
                <img 
                  src={item.image} 
                  alt={item.name}
                  className="w-20 h-20 object-cover rounded-lg"
                />
                <div className="flex-1">
                  <h3 className="font-semibold text-lg">{item.name}</h3>
                  <p className="text-gray-600">‚Ç∫{item.price.toLocaleString()}</p>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-lg">Adet: {item.quantity}</span>
                  <span className="text-xl font-bold text-purple-600">
                    ‚Ç∫{(item.price * item.quantity).toLocaleString()}
                  </span>
                  <Button 
                    variant="outline" 
                    onClick={() => removeFromCart(item.id)}
                    className="text-red-600 border-red-300 hover:bg-red-50"
                  >
                    Kaldƒ±r
                  </Button>
                </div>
              </div>
            </div>
          ))}
          
          <div className="bg-purple-50 rounded-xl p-6 border border-purple-200">
            <div className="flex justify-between items-center mb-4">
              <span className="text-xl font-medium">Toplam Tutar:</span>
              <span className="text-3xl font-bold text-purple-600">‚Ç∫{getTotalPrice().toLocaleString()}</span>
            </div>
            <Button className="w-full bg-purple-600 hover:bg-purple-700 text-lg py-3">
              Sipari≈üi Tamamla
            </Button>
          </div>
        </div>
      )}
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      {currentPage === 'products' && <ProductsPage />}
      {currentPage === 'cart' && <CartPage />}
      {currentPage === 'categories' && (
        <div className="max-w-7xl mx-auto px-4 py-8">
          <h2 className="text-3xl font-bold mb-8">Kategoriler</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white rounded-xl p-8 text-center shadow-sm border hover:shadow-md transition-shadow">
              <div className="text-4xl mb-4">üíª</div>
              <h3 className="text-xl font-semibold">Elektronik</h3>
            </div>
            <div className="bg-white rounded-xl p-8 text-center shadow-sm border hover:shadow-md transition-shadow">
              <div className="text-4xl mb-4">üéß</div>
              <h3 className="text-xl font-semibold">Aksesuarlar</h3>
            </div>
            <div className="bg-white rounded-xl p-8 text-center shadow-sm border hover:shadow-md transition-shadow">
              <div className="text-4xl mb-4">üì±</div>
              <h3 className="text-xl font-semibold">Mobil</h3>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}`,
          description: "Tam √∂zellikli e-ticaret uygulamasƒ±",
          dependencies: ["useState"]
        }
      ],
      instructions: "Bu tam bir e-ticaret uygulamasƒ±dƒ±r. √úr√ºn listeleme, sepet y√∂netimi ve navigasyon i√ßerir.",
      features: [
        "Multi-page navigation",
        "Shopping cart management", 
        "Product catalog",
        "Responsive design",
        "State management"
      ]
    }
  }

  // Dashboard full app
  if (lowerPrompt.includes('dashboard') || lowerPrompt.includes('admin') || lowerPrompt.includes('panel')) {
    return {
      type: "FULL_APP",
      components: [
        {
          name: "AdminDashboard",
          code: `export default function AdminDashboard() {
  const [activeTab, setActiveTab] = useState('overview')
  const [sidebarOpen, setSidebarOpen] = useState(true)
  
  const stats = [
    { title: 'Toplam Kullanƒ±cƒ±', value: '12,456', change: '+12%', color: 'blue' },
    { title: 'Aylƒ±k Gelir', value: '‚Ç∫245,000', change: '+8%', color: 'green' },
    { title: 'Aktif Sipari≈üler', value: '1,234', change: '-3%', color: 'orange' },
    { title: 'D√∂n√º≈ü√ºm Oranƒ±', value: '%24.5', change: '+5%', color: 'purple' }
  ]

  const recentOrders = [
    { id: '001', customer: 'Ahmet Yƒ±lmaz', amount: '‚Ç∫1,250', status: 'Tamamlandƒ±', date: '2 saat √∂nce' },
    { id: '002', customer: 'Ay≈üe Kaya', amount: 'ÔøΩÔøΩÔøΩ890', status: 'Beklemede', date: '4 saat √∂nce' },
    { id: '003', customer: 'Mehmet √ñzkan', amount: '‚Ç∫2,100', status: 'ƒ∞ptal', date: '6 saat √∂nce' }
  ]

  const Sidebar = () => (
    <div className={\`fixed left-0 top-0 h-full bg-gray-900 text-white transition-all duration-300 z-40 \${sidebarOpen ? 'w-64' : 'w-16'}\`}>
      <div className="p-4">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center">
            <span className="font-bold">A</span>
          </div>
          {sidebarOpen && <h1 className="text-xl font-bold">Admin Panel</h1>}
        </div>
      </div>
      
      <nav className="mt-8">
        {[
          { id: 'overview', label: 'Genel Bakƒ±≈ü', icon: 'üìä' },
          { id: 'users', label: 'Kullanƒ±cƒ±lar', icon: 'üë•' },
          { id: 'orders', label: 'Sipari≈üler', icon: 'üì¶' },
          { id: 'products', label: '√úr√ºnler', icon: 'üè∑Ô∏è' },
          { id: 'analytics', label: 'Analitik', icon: 'üìà' },
          { id: 'settings', label: 'Ayarlar', icon: '‚öôÔ∏è' }
        ].map(item => (
          <button
            key={item.id}
            onClick={() => setActiveTab(item.id)}
            className={\`w-full flex items-center gap-3 px-4 py-3 text-left hover:bg-gray-800 transition-colors \${activeTab === item.id ? 'bg-purple-600 border-r-2 border-purple-400' : ''}\`}
          >
            <span className="text-xl">{item.icon}</span>
            {sidebarOpen && <span>{item.label}</span>}
          </button>
        ))}
      </nav>
    </div>
  )

  const Header = () => (
    <header className={\`fixed top-0 right-0 bg-white border-b z-30 transition-all duration-300 \${sidebarOpen ? 'left-64' : 'left-16'}\`}>
      <div className="flex items-center justify-between px-6 py-4">
        <div className="flex items-center gap-4">
          <button 
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="p-2 rounded-lg hover:bg-gray-100"
          >
            ‚ò∞
          </button>
          <h2 className="text-xl font-semibold capitalize">{activeTab}</h2>
        </div>
        
        <div className="flex items-center gap-4">
          <button className="p-2 rounded-lg hover:bg-gray-100 relative">
            üîî
            <span className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">3</span>
          </button>
          <div className="flex items-center gap-3">
            <img src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face" 
                 className="w-8 h-8 rounded-full" alt="Avatar" />
            <span className="font-medium">Admin User</span>
          </div>
        </div>
      </div>
    </header>
  )

  const StatCard = ({ stat }) => (
    <Card>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">{stat.title}</p>
            <p className="text-3xl font-bold">{stat.value}</p>
          </div>
          <div className={\`px-2 py-1 rounded-full text-xs font-medium \${
            stat.change.startsWith('+') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }\`}>
            {stat.change}
          </div>
        </div>
      </CardContent>
    </Card>
  )

  const OverviewTab = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat, index) => (
          <StatCard key={index} stat={stat} />
        ))}
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Son Sipari≈üler</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentOrders.map(order => (
                <div key={order.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <p className="font-medium">{order.customer}</p>
                    <p className="text-sm text-gray-600">#{order.id} ‚Ä¢ {order.date}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-bold">{order.amount}</p>
                    <span className={\`px-2 py-1 rounded-full text-xs \${
                      order.status === 'Tamamlandƒ±' ? 'bg-green-100 text-green-800' :
                      order.status === 'Beklemede' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }\`}>
                      {order.status}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Haftalƒ±k Satƒ±≈ü Trendi</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64 flex items-end justify-between gap-2">
              {[65, 45, 78, 52, 91, 76, 88].map((height, index) => (
                <div key={index} className="flex flex-col items-center gap-2">
                  <div 
                    className="w-8 bg-purple-500 rounded-t"
                    style={{ height: \`\${height}%\` }}
                  ></div>
                  <span className="text-xs text-gray-600">
                    {['Pt', 'Sa', '√áa', 'Pe', 'Cu', 'Ct', 'Pz'][index]}
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      <Sidebar />
      <Header />
      <main className={\`transition-all duration-300 pt-20 \${sidebarOpen ? 'ml-64' : 'ml-16'}\`}>
        <div className="p-6">
          {activeTab === 'overview' && <OverviewTab />}
          {activeTab === 'users' && (
            <Card>
              <CardHeader><CardTitle>Kullanƒ±cƒ± Y√∂netimi</CardTitle></CardHeader>
              <CardContent><p>Kullanƒ±cƒ± listesi ve y√∂netim ara√ßlarƒ± burada...</p></CardContent>
            </Card>
          )}
          {activeTab === 'orders' && (
            <Card>
              <CardHeader><CardTitle>Sipari≈ü Y√∂netimi</CardTitle></CardHeader>
              <CardContent><p>T√ºm sipari≈üler ve detaylarƒ± burada...</p></CardContent>
            </Card>
          )}
        </div>
      </main>
    </div>
  )
}`,
          description: "Tam √∂zellikli admin dashboard uygulamasƒ±",
          dependencies: ["useState"]
        }
      ],
      instructions: "Responsive sidebar, istatistik kartlarƒ± ve √ßoklu sayfa desteƒüi olan tam admin paneli.",
      features: [
        "Responsive sidebar navigation",
        "Real-time statistics",
        "Multi-tab interface", 
        "Order management",
        "User management",
        "Data visualization"
      ]
    }
  }

    // Default enhanced response
    return {
      type: "SINGLE_COMPONENT",
      components: [{
        name: "EnhancedComponent",
        code: `export default function EnhancedComponent() {
    const [value, setValue] = useState('')
    const [isLoading, setIsLoading] = useState(false)
  
    const handleSubmit = useCallback(async (e) => {
      e.preventDefault()
      setIsLoading(true)
      
      try {
        // Handle form submission
        await new Promise(resolve => setTimeout(resolve, 1000))
      } catch (error) {
        console.error('Error:', error)
      } finally {
        setIsLoading(false)
      }
    }, [])
  
    return (
      <Card className="w-full max-w-md mx-auto">
        <CardHeader>
          <CardTitle>Enhanced Component</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <Input
              value={value}
              onChange={(e) => setValue(e.target.value)}
              placeholder="Enter value..."
              className="w-full"
            />
            <Button 
              type="submit" 
              disabled={isLoading}
              className="w-full"
            >
              {isLoading ? 'Loading...' : 'Submit'}
            </Button>
          </form>
        </CardContent>
      </Card>
    )
  }`,
        description: "Geli≈ümi≈ü React bile≈üeni",
        dependencies: ["useState", "useCallback"]
      }],
      instructions: "Bu bile≈üen modern React patterns kullanarak olu≈üturulmu≈ütur.",
      features: ["Responsive design", "Interactive elements", "Modern styling"]
    }
}

export async function POST(req: NextRequest) {
  try {
    const { prompt, apiKey } = await req.json()

    if (!prompt?.trim()) {
      return NextResponse.json({ error: 'Prompt gerekli' }, { status: 400 })
    }

    // OpenAI API ile geli≈ümi≈ü kod √ºretimi (user provided API key or env)
    const useApiKey = apiKey || process.env.OPENAI_API_KEY

    if (useApiKey) {
      try {
        // Update the tryOpenAIGeneration to accept API key parameter
        const generatedCode = await tryOpenAIGenerationWithKey(prompt, useApiKey)

        // Try to parse as JSON first (advanced format)
        try {
          const parsedResponse = JSON.parse(generatedCode)
          return NextResponse.json({
            ...parsedResponse,
            success: true,
            source: 'openai'
          })
        } catch {
          // Fallback to simple code extraction
          const codeMatch = generatedCode.match(/```(?:jsx|javascript|js|tsx|typescript)?\s*\n([\s\S]*?)\n```/)
          const finalCode = codeMatch ? codeMatch[1] : generatedCode

          return NextResponse.json({
            type: "SINGLE_COMPONENT",
            components: [{
              name: "GeneratedComponent",
              code: finalCode.trim(),
              description: "AI generated component",
              dependencies: ["useState"]
            }],
            success: true,
            source: 'openai'
          })
        }
      } catch (openaiError) {
        console.warn('OpenAI API hatasƒ±, geli≈ümi≈ü mock response kullanƒ±lƒ±yor:', openaiError)
      }
    }

    // Geli≈ümi≈ü mock response
    const mockResponse = generateAdvancedMockCode(prompt)
    await new Promise(resolve => setTimeout(resolve, 1500))

    return NextResponse.json({
      ...mockResponse,
      success: true,
      source: 'mock'
    })

  } catch (error) {
    console.error('Kod √ºretim hatasƒ±:', error)
    return NextResponse.json({
      error: 'Kod √ºretilirken hata olu≈ütu',
      details: error instanceof Error ? error.message : 'Bilinmeyen hata'
    }, { status: 500 })
  }
}
